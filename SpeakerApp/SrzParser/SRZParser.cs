//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SRZ.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Roslesinforg.Sigma.SrzParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SRZParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, DOT=2, COMMA=3, OPENBR=4, CLOSEBR=5, MUL=6, DIV=7, ADD=8, SUB=9, 
		UNDERSCORE=10, ID=11, INT=12, NUMBER=13, EQU=14, NOTEQU=15, AND=16, OR=17, 
		LT=18, GT=19, LE=20, GE=21, WHITESPACE=22, COMMENT=23, NEWLINE=24, STRING=25;
	public const int
		RULE_start = 0, RULE_expression = 1, RULE_function = 2, RULE_variable = 3, 
		RULE_range = 4, RULE_set = 5, RULE_constant = 6, RULE_fnAny = 7;
	public static readonly string[] ruleNames = {
		"start", "expression", "function", "variable", "range", "set", "constant", 
		"fnAny"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Any'", "'.'", "','", "'('", "')'", "'*'", "'/'", "'+'", "'-'", 
		"'_'", null, null, null, "'='", null, null, null, "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "DOT", "COMMA", "OPENBR", "CLOSEBR", "MUL", "DIV", "ADD", 
		"SUB", "UNDERSCORE", "ID", "INT", "NUMBER", "EQU", "NOTEQU", "AND", "OR", 
		"LT", "GT", "LE", "GE", "WHITESPACE", "COMMENT", "NEWLINE", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SRZ.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SRZParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SRZParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SRZParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		public ExpressionContext exp;
		public ITerminalNode Eof() { return GetToken(SRZParser.Eof, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << OPENBR) | (1L << ID) | (1L << INT) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 16; _localctx.exp = expression(0);
				}
			}

			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarExpContext : ExpressionContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VarExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpSetCompContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public SetContext right;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public ITerminalNode EQU() { return GetToken(SRZParser.EQU, 0); }
		public ITerminalNode NOTEQU() { return GetToken(SRZParser.NOTEQU, 0); }
		public OpSetCompContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpSetComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpExpCompContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQU() { return GetToken(SRZParser.EQU, 0); }
		public ITerminalNode NOTEQU() { return GetToken(SRZParser.NOTEQU, 0); }
		public ITerminalNode LT() { return GetToken(SRZParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(SRZParser.LE, 0); }
		public ITerminalNode GT() { return GetToken(SRZParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(SRZParser.GE, 0); }
		public OpExpCompContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpExpComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncExpContext : ExpressionContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FuncExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		public ITerminalNode OPENBR() { return GetToken(SRZParser.OPENBR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSEBR() { return GetToken(SRZParser.CLOSEBR, 0); }
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpExpBoolContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(SRZParser.OR, 0); }
		public ITerminalNode AND() { return GetToken(SRZParser.AND, 0); }
		public OpExpBoolContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpExpBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpExpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(SRZParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(SRZParser.DIV, 0); }
		public ITerminalNode ADD() { return GetToken(SRZParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(SRZParser.SUB, 0); }
		public OpExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstExpContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPENBR:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 22; Match(OPENBR);
				State = 23; expression(0);
				State = 24; Match(CLOSEBR);
				}
				break;
			case T__0:
				{
				_localctx = new FuncExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26; function();
				}
				break;
			case ID:
				{
				_localctx = new VarExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 27; variable();
				}
				break;
			case INT:
			case NUMBER:
			case STRING:
				{
				_localctx = new ConstExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 28; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 51;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 49;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new OpExpContext(new ExpressionContext(_parentctx, _parentState));
						((OpExpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 31;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 32;
						((OpExpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((OpExpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 33; ((OpExpContext)_localctx).right = expression(9);
						}
						break;
					case 2:
						{
						_localctx = new OpExpContext(new ExpressionContext(_parentctx, _parentState));
						((OpExpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 34;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 35;
						((OpExpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((OpExpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 36; ((OpExpContext)_localctx).right = expression(8);
						}
						break;
					case 3:
						{
						_localctx = new OpExpCompContext(new ExpressionContext(_parentctx, _parentState));
						((OpExpCompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 37;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 38;
						((OpExpCompContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQU || _la==NOTEQU) ) {
							((OpExpCompContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 39; ((OpExpCompContext)_localctx).right = expression(7);
						}
						break;
					case 4:
						{
						_localctx = new OpExpCompContext(new ExpressionContext(_parentctx, _parentState));
						((OpExpCompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 40;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 41;
						((OpExpCompContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << LE) | (1L << GE))) != 0)) ) {
							((OpExpCompContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 42; ((OpExpCompContext)_localctx).right = expression(6);
						}
						break;
					case 5:
						{
						_localctx = new OpExpBoolContext(new ExpressionContext(_parentctx, _parentState));
						((OpExpBoolContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 43;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 44;
						((OpExpBoolContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							((OpExpBoolContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 45; ((OpExpBoolContext)_localctx).right = expression(5);
						}
						break;
					case 6:
						{
						_localctx = new OpSetCompContext(new ExpressionContext(_parentctx, _parentState));
						((OpSetCompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 46;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 47;
						((OpSetCompContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQU || _la==NOTEQU) ) {
							((OpSetCompContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 48; ((OpSetCompContext)_localctx).right = set();
						}
						break;
					}
					} 
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FnAnyContext fnAny() {
			return GetRuleContext<FnAnyContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; fnAny();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SRZParser.ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 6, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public IToken from;
		public IToken to;
		public ITerminalNode[] DOT() { return GetTokens(SRZParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SRZParser.DOT, i);
		}
		public ITerminalNode[] INT() { return GetTokens(SRZParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(SRZParser.INT, i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(SRZParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(SRZParser.NUMBER, i);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 8, RULE_range);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_localctx.from = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==NUMBER) ) {
				_localctx.from = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 59; Match(DOT);
			State = 60; Match(DOT);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 61; Match(DOT);
				}
			}

			State = 64;
			_localctx.to = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==NUMBER) ) {
				_localctx.to = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public ITerminalNode[] INT() { return GetTokens(SRZParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(SRZParser.INT, i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(SRZParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(SRZParser.NUMBER, i);
		}
		public RangeContext[] range() {
			return GetRuleContexts<RangeContext>();
		}
		public RangeContext range(int i) {
			return GetRuleContext<RangeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SRZParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SRZParser.COMMA, i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 10, RULE_set);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 66; Match(INT);
				}
				break;
			case 2:
				{
				State = 67; Match(NUMBER);
				}
				break;
			case 3:
				{
				State = 68; range();
				}
				break;
			}
			State = 79;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 71; Match(COMMA);
					State = 75;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 72; Match(INT);
						}
						break;
					case 2:
						{
						State = 73; Match(NUMBER);
						}
						break;
					case 3:
						{
						State = 74; range();
						}
						break;
					}
					}
					} 
				}
				State = 81;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken typ;
		public ITerminalNode INT() { return GetToken(SRZParser.INT, 0); }
		public ITerminalNode NUMBER() { return GetToken(SRZParser.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(SRZParser.STRING, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 12, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_localctx.typ = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << NUMBER) | (1L << STRING))) != 0)) ) {
				_localctx.typ = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnAnyContext : ParserRuleContext {
		public IToken mak;
		public ExpressionContext cond;
		public ITerminalNode OPENBR() { return GetToken(SRZParser.OPENBR, 0); }
		public ITerminalNode COMMA() { return GetToken(SRZParser.COMMA, 0); }
		public ITerminalNode CLOSEBR() { return GetToken(SRZParser.CLOSEBR, 0); }
		public ITerminalNode ID() { return GetToken(SRZParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FnAnyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnAny; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISRZVisitor<TResult> typedVisitor = visitor as ISRZVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnAny(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnAnyContext fnAny() {
		FnAnyContext _localctx = new FnAnyContext(Context, State);
		EnterRule(_localctx, 14, RULE_fnAny);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(T__0);
			State = 85; Match(OPENBR);
			State = 86; _localctx.mak = Match(ID);
			State = 87; Match(COMMA);
			State = 88; _localctx.cond = expression(0);
			State = 89; Match(CLOSEBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 9);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', '^', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x5', '\x2', '\x14', '\n', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', ' ', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '\x34', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x37', '\v', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x41', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', 'H', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', 'N', '\n', '\a', '\a', '\a', 'P', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'S', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', 'Q', '\x3', '\x4', '\n', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\t', '\x3', '\x2', '\b', 
		'\t', '\x3', '\x2', '\n', '\v', '\x3', '\x2', '\x10', '\x11', '\x3', '\x2', 
		'\x14', '\x17', '\x3', '\x2', '\x12', '\x13', '\x3', '\x2', '\xE', '\xF', 
		'\x4', '\x2', '\xE', '\xF', '\x1B', '\x1B', '\x2', '\x65', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x38', '\x3', '\x2', '\x2', '\x2', '\b', ':', '\x3', '\x2', '\x2', 
		'\x2', '\n', '<', '\x3', '\x2', '\x2', '\x2', '\f', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'T', '\x3', '\x2', '\x2', '\x2', '\x10', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\a', 
		'\x2', '\x2', '\x3', '\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\b', '\x3', '\x1', '\x2', '\x18', '\x19', '\a', '\x6', '\x2', 
		'\x2', '\x19', '\x1A', '\x5', '\x4', '\x3', '\x2', '\x1A', '\x1B', '\a', 
		'\a', '\x2', '\x2', '\x1B', ' ', '\x3', '\x2', '\x2', '\x2', '\x1C', ' ', 
		'\x5', '\x6', '\x4', '\x2', '\x1D', ' ', '\x5', '\b', '\x5', '\x2', '\x1E', 
		' ', '\x5', '\xE', '\b', '\x2', '\x1F', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\f', '\n', '\x2', '\x2', '\"', 
		'#', '\t', '\x2', '\x2', '\x2', '#', '\x34', '\x5', '\x4', '\x3', '\v', 
		'$', '%', '\f', '\t', '\x2', '\x2', '%', '&', '\t', '\x3', '\x2', '\x2', 
		'&', '\x34', '\x5', '\x4', '\x3', '\n', '\'', '(', '\f', '\b', '\x2', 
		'\x2', '(', ')', '\t', '\x4', '\x2', '\x2', ')', '\x34', '\x5', '\x4', 
		'\x3', '\t', '*', '+', '\f', '\a', '\x2', '\x2', '+', ',', '\t', '\x5', 
		'\x2', '\x2', ',', '\x34', '\x5', '\x4', '\x3', '\b', '-', '.', '\f', 
		'\x6', '\x2', '\x2', '.', '/', '\t', '\x6', '\x2', '\x2', '/', '\x34', 
		'\x5', '\x4', '\x3', '\a', '\x30', '\x31', '\f', '\v', '\x2', '\x2', '\x31', 
		'\x32', '\t', '\x4', '\x2', '\x2', '\x32', '\x34', '\x5', '\f', '\a', 
		'\x2', '\x33', '!', '\x3', '\x2', '\x2', '\x2', '\x33', '$', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\'', '\x3', '\x2', '\x2', '\x2', '\x33', '*', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '-', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x5', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', '\x10', '\t', 
		'\x2', '\x39', '\a', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\r', 
		'\x2', '\x2', ';', '\t', '\x3', '\x2', '\x2', '\x2', '<', '=', '\t', '\a', 
		'\x2', '\x2', '=', '>', '\a', '\x4', '\x2', '\x2', '>', '@', '\a', '\x4', 
		'\x2', '\x2', '?', '\x41', '\a', '\x4', '\x2', '\x2', '@', '?', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\t', '\a', '\x2', 
		'\x2', '\x43', '\v', '\x3', '\x2', '\x2', '\x2', '\x44', 'H', '\a', '\xE', 
		'\x2', '\x2', '\x45', 'H', '\a', '\xF', '\x2', '\x2', '\x46', 'H', '\x5', 
		'\n', '\x6', '\x2', 'G', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'I', 'M', '\a', '\x5', '\x2', '\x2', 
		'J', 'N', '\a', '\xE', '\x2', '\x2', 'K', 'N', '\a', '\xF', '\x2', '\x2', 
		'L', 'N', '\x5', '\n', '\x6', '\x2', 'M', 'J', '\x3', '\x2', '\x2', '\x2', 
		'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', 'I', '\x3', '\x2', '\x2', '\x2', 
		'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\t', '\b', '\x2', 
		'\x2', 'U', '\xF', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x3', 
		'\x2', '\x2', 'W', 'X', '\a', '\x6', '\x2', '\x2', 'X', 'Y', '\a', '\r', 
		'\x2', '\x2', 'Y', 'Z', '\a', '\x5', '\x2', '\x2', 'Z', '[', '\x5', '\x4', 
		'\x3', '\x2', '[', '\\', '\a', '\a', '\x2', '\x2', '\\', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x13', '\x1F', '\x33', '\x35', '@', 'G', 'M', 
		'Q',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Roslesinforg.Sigma.SrzParser
